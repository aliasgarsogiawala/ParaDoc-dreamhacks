import {
  GoogleGenerativeAI,
  HarmBlockThreshold,
  HarmCategory,
} from "@google/generative-ai";

// Your API key
const API_KEY = process.env.NEXT_PUBLIC_GEMINI_API_KEY || "your-api-key-here";

// Initialize the Gemini API
const genAI = new GoogleGenerativeAI(API_KEY);

// Safety settings for medical content
const safetySettings = [
  {
    category: HarmCategory.HARM_CATEGORY_HARASSMENT,
    threshold: HarmBlockThreshold.BLOCK_ONLY_HIGH,
  },
  {
    category: HarmCategory.HARM_CATEGORY_HATE_SPEECH,
    threshold: HarmBlockThreshold.BLOCK_ONLY_HIGH,
  },
  {
    category: HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT,
    threshold: HarmBlockThreshold.BLOCK_ONLY_HIGH,
  },
  {
    category: HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT,
    threshold: HarmBlockThreshold.BLOCK_ONLY_HIGH,
  },
];

export async function generateHealthTimelines(
  symptom: string,
  choices: string[] = ["do nothing", "seek professional help", "self-medicate"]
) {
  try {
    if (!API_KEY || API_KEY === "your-api-key-here") {
      console.error("API key not configured properly");
      return {
        error:
          "API key not configured. Please set NEXT_PUBLIC_GEMINI_API_KEY in your environment variables.",
        details: "Configuration Error",
      };
    }
    // For Gemini Pro
    const model = genAI.getGenerativeModel({
      model: "gemini-2.0-flash",
      safetySettings,
    });

    const prompt = `
    You are a medical simulation AI that generates possible future outcomes based on a person's symptoms and potential decisions.

    ---

    **SYMPTOM DESCRIPTION:**  
    "${symptom}"

    ---

    Your task:

    1. Based on the complexity and ambiguity of the symptom described, generate **between 5 to 7 unique decision paths** a patient might realistically consider. Do not always assume 3. Simple symptoms might yield 2–3 paths, complex ones up to 7.
    2. Each decision path must describe a clearly distinct action the patient could take (e.g., doing nothing, visiting a clinic, self-medicating, consulting a friend, trying alternative therapy, etc.).
    3. For each path, simulate a 7-day progression (Days 1 through 7). Include:
       - Daily symptom progression
       - Complications or improvements
       - Impact on daily life or mental health
    4. Assign two metrics per path:
       - **Risk percentage** (0–100): how dangerous this path is
       - **Recovery percentage** (0–100): likelihood of improvement or full recovery by Day 7

    After generating all paths, identify **which path (if any)** leads to the best health outcome. The "best" path should balance recovery, risk, and practical accessibility. If no path is clearly superior, set bestPath to "null".

    ---

    **Return response as valid JSON:**

    {
      "timelines": [
        {
          "path": "Short title of this path (e.g. 'Self-medicate at home')",
          "action": "Full sentence describing the decision taken",
          "days": [
            {"day": 1, "description": "..."},
            {"day": 2, "description": "..."},
            {"day": 3, "description": "..."},
            {"day": 4, "description": "..."},
            {"day": 5, "description": "..."},
            {"day": 6, "description": "..."},
            {"day": 7, "description": "..."}
          ],
          "riskPercentage": 0-100,
          "recoveryPercentage": 0-100
        }
        // more path objects, as needed
      ],
      "bestPath": {
        "pathIndex": 0, // index of the best timeline, or null if no path is clearly superior
        "explanation": "Why this path is best, or a statement explaining why no clear winner exists"
      },
      "disclaimer": "This is a fictional simulation generated by an AI for educational and awareness purposes only. It is not medical advice. Always consult a licensed medical professional for real-life concerns."
    }
    ---

    Be realistic. Some outcomes can worsen even under well-intentioned decisions. Avoid repetitive paths. Include uncertainty and variability where appropriate.
        `;

    const result = await model.generateContent(prompt);
    const response = await result.response;
    const text = response.text();

    // Extract JSON from the response
    const jsonMatch =
      text.match(/```json\n([\s\S]*?)\n```/) || text.match(/{[\s\S]*}/);
    const jsonData = jsonMatch ? jsonMatch[1] || jsonMatch[0] : text;

    try {
      return JSON.parse(jsonData);
    } catch (e) {
      console.error("Failed to parse JSON from Gemini response", e);
      console.log("Raw response:", text);
      return {
        error: "Failed to parse timeline data",
        rawResponse: text,
      };
    }
  } catch (error) {
    console.error("Error generating health timelines:", error);
    return {
      error: "Failed to generate timelines. Please try again.",
      details: error instanceof Error ? error.message : String(error),
    };
  }
}

// Test function to verify API integration
export async function testGeminiAPI() {
  try {
    const model = genAI.getGenerativeModel({ model: "gemini-pro" });
    const result = await model.generateContent(
      "Hello, can you confirm this API test is working?"
    );
    const response = await result.response;
    return {
      success: true,
      message: response.text(),
    };
  } catch (error) {
    console.error("Gemini API test failed:", error);
    return {
      success: false,
      error: error instanceof Error ? error.message : "Unknown error",
    };
  }
}

// Add this function at the end of the file
export async function debugGeminiAPI() {
  try {
    // Check if API key is set
    if (!API_KEY || API_KEY === "your-api-key-here") {
      return {
        success: false,
        error: "API key not configured properly",
        details:
          "Please set NEXT_PUBLIC_GEMINI_API_KEY in your environment variables",
      };
    }

    // Try to create model instance (will fail if API key is invalid)
    const model = genAI.getGenerativeModel({ model: "gemini-pro" });

    // Simple test prompt
    const result = await model.generateContent(
      "Reply with only the word 'SUCCESS' if you can see this message."
    );

    const response = await result.response;
    const text = response.text();

    return {
      success: true,
      message: text,
      apiKeyConfigured: API_KEY !== "your-api-key-here",
    };
  } catch (error) {
    return {
      success: false,
      error: error instanceof Error ? error.message : "Unknown error",
      details: JSON.stringify(error, null, 2),
    };
  }
}
