import { GoogleGenerativeAI } from "@google/generative-ai";

// Initialize the Google Generative AI with your API key
const genAI = new GoogleGenerativeAI(process.env.NEXT_PUBLIC_GEMINI_API_KEY || "");

// Function to generate the simulation prompt
export function generateSimulationPrompt(symptom: string, choices: string[]) {
  return `
You are a medical simulation AI that generates possible future outcomes based on a person's symptom and the choices they make.

---

**SYMPTOM DESCRIPTION:**  
"${symptom}"

**SCENARIOS TO SIMULATE:**  
${choices.map((choice, i) => `${i + 1}. If the patient chooses to: ${choice}`).join('\n')}

---

For **each scenario**, generate a 7-day timeline simulating how the condition may progress. Show outcomes only for **Day 1, Day 3, Day 5, and Day 7**.

For each path, include:
- Daily symptom progression
- Complications or improvements
- Effect on daily life or mental health
- Risk percentage (0–100%) indicating the danger of this choice
- Recovery percentage (0–100%) indicating the likelihood of recovery

After all timelines, determine which **one path (if any)** offers the best outcome, based on a balance of recovery speed, risk, and practicality. If no path is clearly better, say so.

---

Format the entire response as a valid JSON object:

{
  "timelines": [
    {
      "path": "Short name for this path (e.g. 'Ignore It')",
      "action": "Patient chooses to ${choices[0]}",
      "days": [
        {"day": 1, "description": "..."},
        {"day": 3, "description": "..."},
        {"day": 5, "description": "..."},
        {"day": 7, "description": "..."}
      ],
      "riskPercentage": 0-100,
      "recoveryPercentage": 0-100
    }
    // More paths...
  ],
  "bestPath": {
    "pathIndex": 0, // Index of the recommended path (0, 1, 2, ...), or null if none
    "explanation": "Why this is considered the best path, or why none are clearly superior"
  },
  "disclaimer": "This is a fictional simulation generated by an AI for educational and awareness purposes only. It is not medical advice. Please consult a licensed healthcare professional for real medical concerns."
}

---

**Tone:** Use medically accurate, but calm and human-friendly language. Do not scare the user unnecessarily. If symptoms seem dangerous, clearly suggest seeking professional care in the simulated outcomes.
`;
}

// Types for the simulation response
export interface SimulationDay {
  day: number;
  description: string;
}

export interface SimulationTimeline {
  path: string;
  action: string;
  days: SimulationDay[];
  riskPercentage: number;
  recoveryPercentage: number;
}

export interface SimulationResponse {
  timelines: SimulationTimeline[];
  bestPath: {
    pathIndex: number | null;
    explanation: string;
  };
  disclaimer: string;
}

// Function to generate random number of paths (1-7)
export function generateRandomPathCount(min = 3, max = 7): number {
  return Math.floor(Math.random() * (max - min + 1)) + min;
}

// Function to generate default choices if none provided
export function generateDefaultChoices(): string[] {
  const allChoices = [
    "Ignore the symptoms and continue with normal routine",
    "Visit a nearby clinic for early diagnosis",
    "Take over-the-counter medication and rest at home",
    "Consult with a specialist doctor",
    "Try home remedies and natural treatments",
    "Use telemedicine for a virtual consultation",
    "Visit the emergency room immediately"
  ];
  
  // Generate a random number of choices (3-7)
  const numChoices = generateRandomPathCount(3, 7);
  
  // Shuffle the array and take the first numChoices elements
  return allChoices
    .sort(() => Math.random() - 0.5)
    .slice(0, numChoices);
}

// Function to call Gemini API and get simulation results
export async function generateMedicalSimulation(
  symptom: string,
  choices?: string[]
): Promise<SimulationResponse> {
  try {
    // If no choices provided, generate random number of default choices
    const pathChoices = choices || generateDefaultChoices();
    
    // Generate the prompt
    const prompt = generateSimulationPrompt(symptom, pathChoices);
    
    // Call Gemini API
    const model = genAI.getGenerativeModel({ model: "gemini-pro" });
    const result = await model.generateContent(prompt);
    const response = result.response;
    const text = response.text();
    
    // Parse the JSON response
    const simulationData = JSON.parse(text) as SimulationResponse;
    
    return simulationData;
  } catch (error) {
    console.error("Error generating medical simulation:", error);
    
    // Return fallback data in case of error
    return {
      timelines: [
        {
          path: "Error Path",
          action: "Could not generate simulation",
          days: [
            { day: 1, description: "Error generating simulation. Please try again." },
            { day: 3, description: "Error generating simulation. Please try again." },
            { day: 5, description: "Error generating simulation. Please try again." },
            { day: 7, description: "Error generating simulation. Please try again." }
          ],
          riskPercentage: 50,
          recoveryPercentage: 50
        }
      ],
      bestPath: {
        pathIndex: null,
        explanation: "Could not determine best path due to an error."
      },
      disclaimer: "This is a fictional simulation generated by an AI for educational and awareness purposes only. It is not medical advice. Please consult a licensed healthcare professional for real medical concerns."
    };
  }
}